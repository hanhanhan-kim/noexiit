#!/usr/bin/env python3

import pandas as pd


#
def parse_dats(names, framerate, ball_radius):
    '''
    Takes a list of .dat files generated by FicTrac (ver 2) and returns a \
    single concatenated dataframe.
    The pre-processed dataframe is given proper headings, as informed by \
    the documentation on rjdmoore's FicTrac GitHub page. 
    All values are converted into floats, except for the frame and sequence \
    counters, which are converted into ints. In addition, elapsed time is \
    converted into seconds and minutes, and the integrated X and Y positions \
    are converted to real-world values, by multiplying them against the ball \
    radius. 
    
    Parameters:
    names: A list of default .dat files generated by FicTrac (ver 2)
    framerate: The framerate of the acquisition of the videos FicTrac (ver 2)\
     analyzes. #TODO: compute the framerate, rather than take as an arg
    ball_radius: The radius of the ball (mm) the insect was on. Used to compute\
     the real-world values for the integrated x and y. 

    Return:
    A single Pandas dataframe that concatenates all the input .dat files.
    '''
    headers = [ "frame_cntr",
                "delta_rotn_vector_cam_x", 
                "delta_rotn_vector_cam_y", 
                "delta_rotn_vector_cam_z", 
                "delta_rotn_err_score", 
                "delta_rotn_vector_lab_x", 
                "delta_rotn_vector_lab_y", 
                "delta_rotn_vector_lab_z",
                "abs_rotn_vector_cam_x", 
                "abs_rotn_vector_cam_y", 
                "abs_rotn_vector_cam_z",
                "abs_rotn_vector_lab_x", 
                "abs_rotn_vector_lab_y", 
                "abs_rotn_vector_lab_z",
                "integrat_x_posn",
                "integrat_y_posn",
                "integrat_animal_heading",
                "animal_mvmt_direcn",
                "animal_mvmt_spd",
                "integrat_fwd_motn",
                "integrat_side_motn",
                "timestamp",
                "seq_cntr",
                "delta_timestamp",
                "alt_timestamp" ]
    
    dfs = []

    for idx, dat in enumerate(names):
        with open(dat, 'r') as f:
            next(f) # skip first row
            df = pd.DataFrame((l.strip().split(',') for l in f), columns=headers)

        # Convert all values to floats:
        df = df[headers].astype(float)

        # Convert the values in the frame and sequence counters columns to ints:
        df['frame_cntr'] = df['frame_cntr'].astype(int)
        df['seq_cntr'] = df['seq_cntr'].astype(int)

        # Compute real-world values for the integrated x and y positions:
        df['X_mm'] = df['integrat_x_posn'] * ball_radius
        df['Y_mm'] = df['integrat_y_posn'] * ball_radius

        # Compute elapsed time:
        df['secs_elapsed'] = df['frame_cntr']/framerate
        df['mins_elapsed'] = df['secs_elapsed']/60
        
        # Discretize minute intervals as strings:
        df['min_int'] = df['mins_elapsed'].astype('int') + 1
        df['min_int'] = df['min_int'].apply(str)

        # Assign animal number:
        df['animal'] = idx 

        dfs.append(df)

    dfs = pd.concat(dfs)
        
    return dfs